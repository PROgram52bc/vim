snippet vec "vector" w
\vec{${1:u}}`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet


# from https://github.com/SirVer/ultisnips/issues/913#issuecomment-392086829
global !p
def fix_indent(snip):
	vim.eval('feedkeys("\<c-f>")')
endglobal

post_expand "fix_indent(snip)"
snippet it "Individual item" b
\item`!p
if t[1] and t[1][0] == '\n':
	snip.rv = ''
else:
	snip.rv = ' '
`$1
endsnippet

# from https://castel.dev/post/lecture-notes-1/#latex-snippets
snippet mk "Math" wA
$${1}`!p
if t[1] and t[1][0] == '\n': snip += ''`$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet "([a-zA-Z])([0-9])" "add subscription" rwA
`!p
snip.rv = match.group(1) + '_' + match.group(2)
`$0
endsnippet

snippet "([a-zA-Z])_([0-9]{2})" "add curly braces in subscription" rwA
`!p
snip.rv = match.group(1) + "_{" + match.group(2)
`$1}$0
endsnippet

global !p
def transform_matrix_body(snip):
	body = snip.v.text
	if not body:
		return
	# remove all indent
	body = re.sub(r'^\s+', '', body, flags=re.M)
	# replace spacing between numbers with ' & '
	body = re.sub(r'(\d+)[\t ]+(?=\d+)', r'\1 & ', body)
	# replace new line with double back slash '\\'
	body = re.sub(r'\n(?=.)', r'\\\\\n', body)
	# indent the lines
	lines = body.splitlines()
	snip.rv = lines[0]
	snip >> 1
	for line in body.splitlines()[1:]:
		snip += line
		pass
endglobal

# Borrowed from texmath.snippets
snippet matr "matrix with visual expansion" b
\begin{${1:p/b/v/V/B/small}matrix}
	${2:`!p transform_matrix_body(snip)`}
\end{$1matrix}$0
endsnippet
